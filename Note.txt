How To Build Feature Flags Like A Senior Dev In 20 Minutes (https://www.youtube.com/watch?v=VBCYqp8l3Lc)

https://github.com/WebDevSimplified/feature-flags-sample-code
https://github.com/Annie-Huang/feature-flags-sample-code

--------------------------------------------------------------------
Make a copy from web dev simplified repo and create my repo.
The reason I don't want to do clone is that I will add more notes into this repo.

PS C:\react\feature-flags-sample-code> npm i
PS C:\react\feature-flags-sample-code> npx prettier . --write

PS C:\react\feature-flags-sample-code> npm run dev


Pros:
1. Kill Switch
    e.g. e-commerce site where people are able to purchase products. Suddenly a bug is deployed into production and user can purchase product for free.
    such feature flag will be long running feature flags
2. Beta Testing
    want certain users to be able to opt into like a beta version. e.g. admin user or test user for prod
3. A/B Testing
    e.g. 30% of user see this specific feature and the other 70% won't see it.
4. Safer Refactors
    e.g. you wrote a new sql query to replace the old one but you don't want to entire decommission the old one until you see results are matching and better performance.
5. Easier Deploys
    e.g. Things are already in main master branch but it's not ready to deploy, can use a feature flags to wrap it.

Cons:
1. Increased Complexity
2. More Code
3. Require Maintenance
4. New Failure Points


Where to store?
Location            Implementation  Request Speed   With Cache  Update Speed    Cost    Flexibility
In code             Easy            Fast            Fast        Slow            Free    High
Env Vars            Easy            Fast            Fast        Slow            Free    Low (only store true or false)
Database            Hard (harder)   Slow            Fast        Fast            Free    High
Saas (paid product) Easy            Slow            Fast        Fast            Paid    High


Main file is in
C:\react\feature-flags-sample-code\src\components\FeatureEnabled.tsx
C:\react\feature-flags-sample-code\src\lib\featureFlags.ts
C:\react\feature-flags-sample-code\src\lib\getUser.ts

{ id: 'e', role: 'user' } as User; --> will always only see 2 cards
{ id: 'e', role: 'user' } as User; --> will always see 3 cards
because we implemented cache. The cache is done in userIsWithinPercentage in featureFlags.ts


